EASY

Description:
You are given the root of a binary search tree (BST) and an integer val.

Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.

Solution:
Start a loop from the top of the tree, iterate down as appropriate (compare current value to search value). Return current node at terminated loop if it is correct.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        TreeNode* curr = root;

        while (curr != nullptr)
        {
            if (curr->val > val)
            {
                curr = curr->left;
            }
            else if (curr->val < val)
            {
            curr = curr->right;
            }
            else {break;}
        }
        
        if (curr == nullptr || curr->val != val) 
        {return nullptr;
        }
        else 
        return curr;

    }
};
