MEDIUM

Description:
Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.

Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.


Solution:
We can use a sliding window for this. No use for any data structure (although a set would make sense) -- it is faster and not too cluttery to just check against each vowel directly.
For the first k characters, we can simply increase a running vowel count. Once we have a substring size k, we slide the substring, increasing if s[i] is a vowel, decreasing if s[i-k] is a vowel (independently).

Keep a running max vowel count and return it at the end.

class Solution {
public:
    int maxVowels(string s, int k) {
        // longest substring with vowels only
        // keep a running substring
        // record the most number of vowels

        // conditions on new character:
        // is vowel: ++ size if back is nonvowel
        // is not vowel: -- if back is vowel
        
        // increase front and back

        // only increment front until front = k-1

        // edge cases: careful around ends of string s



        int size=0;
        int max = 0;

        for (int i =0; i<s.size();i++)
        {
            if(i<k)
            {
                if (s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o'||s[i]=='u')
                {
                    size++;
                }
            }
            else 
            {
                if (s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o'||s[i]=='u')
                {
                    size++;
                }
                if (s[i-k]=='a' || s[i-k]=='e' || s[i-k]=='i' || s[i-k]=='o'||s[i-k]=='u')
                {
                    size--;
                }
            } 
            if (size > max) {max = size;}
        }
    return max;
    }
};
