MEDIUM

Description:
Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.


Solution:
We can use a helper function that checks each node against a current MAX value in the path to see if it is a good node or not.
If it is a good node, we update the MAX and call the function on its children + 1. Otherwise we just call the function on its
children with the same MAX. Terminates at leaves.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int goodNodes(TreeNode* root) {
        

        // recursively go down tree, left and right.
        // keep track of largest node above MAX
        // return 1 at each node if its value is larger than the MAX then update MAX. Else, return 0 and pass same max
    int max = root->val;

    return goodNodesHelper(root, max);


    }

    int goodNodesHelper(TreeNode* root, int max) {

    if (root == nullptr) {return 0;}
    else
    {
        if (root->val >= max)
        {
            max = root->val;
            return (1+ goodNodesHelper(root->left, max) + goodNodesHelper(root->right, max));
        }
        else
        {
             return (goodNodesHelper(root->left, max) + goodNodesHelper(root->right, max));
        }
    }
    }
};
